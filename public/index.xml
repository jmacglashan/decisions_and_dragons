<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Decisions &amp; Dragons</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Decisions &amp; Dragons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 May 2024 11:39:36 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why does experience replay require off-policy learning and how is it different from on-policy learning?</title>
      <link>http://localhost:1313/posts/off_policy_replay/</link>
      <pubDate>Sat, 04 May 2024 11:39:36 -0400</pubDate>
      <guid>http://localhost:1313/posts/off_policy_replay/</guid>
      <description>&lt;p&gt;When you use an experience replay buffer, you save the most recent $k$ experiences of the agent, and sample data from that buffer for training. Typically, the agent does a step of training to update its policy for every step in the environment. At any moment in time, the vast majority of experiences in the buffer are generated with a different &amp;ndash; earlier &amp;ndash; policy than the current policy. And if the policy used to collect data is different than the policy being evaluated or improved, then you need an off-policy method.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is the &#34;horizon&#34; in reinforcement learning?</title>
      <link>http://localhost:1313/posts/horizon/</link>
      <pubDate>Sun, 21 Apr 2024 16:49:00 -0400</pubDate>
      <guid>http://localhost:1313/posts/horizon/</guid>
      <description>&lt;p&gt;In reinforcement learning, an agent receives reward on each time step. The goal, loosely speaking, is to maximize the future reward received. But that doesn’t fully define the goal, because each decision can affect what reward the agent can receive the future. Consequently, we’re left with the question &amp;ldquo;how does potential future reward affect our decision right now?&amp;rdquo; The &amp;ldquo;horizon&amp;rdquo; refers to how far into the future the agent will optimize its reward. You can have finite-horizon objectives, or even infinite-horizon objectives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why doesn&#39;t Q-learning work with continuous actions?</title>
      <link>http://localhost:1313/posts/q_learning_discrete_only/</link>
      <pubDate>Sun, 21 Apr 2024 15:36:15 -0400</pubDate>
      <guid>http://localhost:1313/posts/q_learning_discrete_only/</guid>
      <description>&lt;p&gt;Q-learning requires finding the action with the maximum Q-value in two places: (1) In the learning update itself; and (2) when extracting the policy from the learned Q-values. When there are a small number of discrete actions, you can simply enumerate the Q-values for each and pick the action with the highest value. However, this approach does not work with continuous actions, because there are an infinite number of actions to evaluate!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why is the DDPG gradient the product of the Q-function gradient and policy gradient?</title>
      <link>http://localhost:1313/posts/ddpg_grad/</link>
      <pubDate>Sat, 20 Apr 2024 12:51:21 -0400</pubDate>
      <guid>http://localhost:1313/posts/ddpg_grad/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://arxiv.org/abs/1509.02971&#34;&gt;DDPG&lt;/a&gt; and &lt;a href=&#34;https://proceedings.mlr.press/v32/silver14.pdf&#34;&gt;DPG paper&lt;/a&gt; before it express the gradient of the objective $J(\pi)$ as the product of the policy and Q-function gradients:&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\nabla_\theta J(\pi) = E_{s \sim \rho^\pi} \left[\nabla_\theta \pi_\theta(s) \nabla_a Q(s, a) \rvert_{a \triangleq \pi_\theta(s)} \right].&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;This expression looks a little scary, but it&amp;rsquo;s conveying a straightforward concept: the gradient is the average of the Q-function&amp;rsquo;s gradient with respect to the policy parameters, evaluated at the policy&amp;rsquo;s selected action. That may not be obvious because the product of &amp;ldquo;gradients&amp;rdquo; (spoiler: there is some notation abuse) is the result of applying the multivariable chain rule of differentiation. If we were to reverse this step, the expected value would simplify to the more explicit expression $\nabla_\theta Q(s, \pi_\theta(s))$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If Q-learning is off-policy, why doesn&#39;t it require importance sampling?</title>
      <link>http://localhost:1313/posts/q_learning_doesnt_need_importance_sampling/</link>
      <pubDate>Tue, 02 Apr 2024 23:43:37 -0400</pubDate>
      <guid>http://localhost:1313/posts/q_learning_doesnt_need_importance_sampling/</guid>
      <description>&lt;p&gt;In off-policy learning, we evaluate the value function for a policy other than the one we are following in the environment. This difference creates a mismatch in state-action distributions. To account for this difference, some actor-critic methods use importance sampling. However, Q-learning, does not. There is a simple reason for that: In Q-learning, we only use samples to tell us about the effect of actions on the environment, not to estimate how good the policy action selection is. Let&amp;rsquo;s make that more concrete with a simple example and re-derive the Q-learning and importance sampling approaches.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is the difference between V(s) and Q(s,a)?</title>
      <link>http://localhost:1313/posts/q_vs_v/</link>
      <pubDate>Sat, 30 Mar 2024 23:24:52 -0400</pubDate>
      <guid>http://localhost:1313/posts/q_vs_v/</guid>
      <description>&lt;p&gt;State value function $V(s)$ expresses how well the agent expects to do when it acts normally. $Q(s, a)$ is a counterfactual function that expresses how well the agent expects to do if it first takes some potentially alternative action before acting normally.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why does the policy gradient include a log probability term?</title>
      <link>http://localhost:1313/posts/why_does_the_policy_gradient_include_log_prob/</link>
      <pubDate>Fri, 29 Mar 2024 20:07:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/why_does_the_policy_gradient_include_log_prob/</guid>
      <description>&lt;p&gt;Actually, it doesn&amp;rsquo;t! What you&amp;rsquo;re probably thinking of is the &lt;a href=&#34;https://people.cs.umass.edu/~barto/courses/cs687/williams92simple.pdf&#34;&gt;REINFORCE&lt;/a&gt; &lt;em&gt;estimate&lt;/em&gt; of the policy gradient. How we derive the REINFORCE estimate you&amp;rsquo;re familiar with and &lt;em&gt;why&lt;/em&gt; we use it is something I found to be poorly explained in literature. Fortunately, it is not a hard concept to learn!&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is the difference between model-based and model-free RL?</title>
      <link>http://localhost:1313/posts/model_free_vs_model_based/</link>
      <pubDate>Fri, 29 Mar 2024 19:50:17 -0400</pubDate>
      <guid>http://localhost:1313/posts/model_free_vs_model_based/</guid>
      <description>&lt;p&gt;In reinforcement learning, the agent is not assumed to know how the environment will be affected by its actions. Model-based and model-free reinforcement learning tackle this problem in different ways. In model-based reinforcement learning, the agent learns a model of how the environment is affected by its actions and uses this model to determine how to act. In model-free reinforcement learning, the agent learns how to act without ever learning to precisely predict how the environment will be affected by its actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Tue, 26 Mar 2024 20:17:59 -0400</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>Reinforcement learning (RL) is an elegant problem definition for autonomous agents that learn from their own interactions with an environment. But the methods to solve this simple problem definition are not so simple. To solve this problem you must simultaneously tackle many subproblems that are all complex enough to warrant their own subfields in AI, such as perception, prediction, planning, and memory.&#xA;Unlike other forms of machine learning, we cannot feed an algorithm a well curated dataset.</description>
    </item>
    <item>
      <title>Corrections</title>
      <link>http://localhost:1313/corrections/</link>
      <pubDate>Tue, 26 Mar 2024 20:17:59 -0400</pubDate>
      <guid>http://localhost:1313/corrections/</guid>
      <description>I have a tendency to make a lot of typos. My brain reads what I meant, not what I typed. On an occasion, I may also make an error (:gasp:) or state something too imprecisely.&#xA;I don&amp;rsquo;t have collaborators for this site to check for any kind of errors. Therefore, if you spot an error of any sort, please let me know by reporting it on my Github issues page or contact me some other way (see the about page).</description>
    </item>
    <item>
      <title>Math Notation Cheatsheet</title>
      <link>http://localhost:1313/notation/</link>
      <pubDate>Tue, 26 Mar 2024 20:17:59 -0400</pubDate>
      <guid>http://localhost:1313/notation/</guid>
      <description>In this section I outline the meaning of the mathematical notation I use. When appropriate (and possible), I also describe the meaning in simple python.&#xA;General math and statistics $f(x) \triangleq mx + b$ The $\triangleq$ indicates that the expression on the left is defined to be the expression on the right, rather than an equivalence that is derived from mathematical rules.&#xA;$(a, b)$ The set of real numbers between $a$ and $b$, excluding those values.</description>
    </item>
  </channel>
</rss>
